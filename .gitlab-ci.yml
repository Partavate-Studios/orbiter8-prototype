stages:
  # - test
  - docker-build
  - deploy-staging
  - deploy-production

# Not built out yet
# test:
#   stage: test
#   image: node:lts-alpine
#   script:
#     - cd orbiter-client/
#     - npm install
#     - npm run test

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: docker-build
  services:
    - docker:dind # Docker-in-docker, runs on Gitlab infra
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - cd orbiter-client/
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag="latest"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag="$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "${CI_REGISTRY_IMAGE}/orbiter8-client:${tag}" .
    - docker push "${CI_REGISTRY_IMAGE}/orbiter8-client:${tag}"
    - echo TAGGED_IMAGE="${CI_REGISTRY_IMAGE}/orbiter8-client:${tag}" >> ../image.env
  artifacts:
    reports:
      dotenv: image.env # Save generated image name/tag for later stages
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - orbiter-client/Dockerfile

deploy-staging:
  image: 
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy-staging
  needs:
    - job: docker-build
      artifacts: true
  when: manual
  script:
    - kubectl config get-contexts
    - kubectl config use-context partavate/infrastructure:partavate-production-k8s
    - kubectl set image --namespace websites deployment/orbiter8-client-staging orbiter8-client=${TAGGED_IMAGE}
    - kubectl rollout restart deployment/orbiter8-client-staging --namespace websites

deploy-production:
  image: 
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy-production
  needs:
    - job: docker-build
      artifacts: true
  when: manual
  script:
    - kubectl config get-contexts
    - kubectl config use-context partavate/infrastructure:partavate-production-k8s
    - kubectl set image --namespace websites deployment/orbiter8-client orbiter8-client=${TAGGED_IMAGE}
    - kubectl rollout restart deployment/orbiter8-client --namespace websites
